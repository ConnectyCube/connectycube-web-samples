{"version":3,"sources":["webpack:///./src/call-service.js"],"names":["iOS","window","device","platform","ConnectyCube","videochat","onCallListener","bind","onAcceptCallListener","onRejectCallListener","onStopCallListener","onUserNotAnswerListener","onRemoteStreamListener","onDevicesChangeListener","document","getElementById","addEventListener","rejectCall","acceptCall","audio","video","elementId","options","muted","mirror","opponents","$videochatStreams","$videochatStreamsTemplate","videochatStreamsTemplate","Handlebars","compile","innerHTML","length","classList","value","add","remove","session","extension","initiatorID","currentUserID","_session","busy","showIncomingCallModal","userId","$modal","contains","hideIncomingCallModal","showSnackbar","userName","_getUserById","infoText","$dialing","pause","stopCall","isStoppedByInitiator","stream","remoteStreamSelector","attachMediaStream","$muteUnmuteButton","disabled","_prepareVideoElement","opponentsIDs","filter","map","id","name","addStreamElements","getUserMedia","mediaParams","then","accept","setActiveDeviceId","reject","opponentsIds","type","CallType","VIDEO","querySelectorAll","forEach","$checkbox","checked","dataset","push","play","createNewSession","call","$callScreen","$videochatScreen","$muteButton","$streamContainers","stop","clearSession","ID","$calling","$endCall","$switchCameraButton","mediaDevicesIds","activeDeviceId","isAudioMuted","style","background","getMediaDevices","mediaDevices","deviceId","switchCamera","videoTrackSettings","getVideoTracks","getSettings","unmute","mute","mediaDevicesId","find","switchMediaTracks","isSharingScreen","getDisplayMedia","updateStream","startEventSharinScreen","stopSharingScreen","error","console","warn","mediaParam","$snackbar","setTimeout","_incomingCallModal","className","$initiator","key","user","users","videoElement","$video","visibility","backgroundColor","zIndex"],"mappings":"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","file":"main.01369269a4be6d6114d9.hot-update.js","sourcesContent":["// import ConnectyCube from \"connectycube\";\nimport Handlebars from \"handlebars\";\nimport { users } from \"./config\";\n\nconst iOS = window.device?.platform === \"iOS\";\n\nclass CallService {\n  init = () => {\n    ConnectyCube.videochat.onCallListener = this.onCallListener.bind(this);\n    ConnectyCube.videochat.onAcceptCallListener = this.onAcceptCallListener.bind(this);\n    ConnectyCube.videochat.onRejectCallListener = this.onRejectCallListener.bind(this);\n    ConnectyCube.videochat.onStopCallListener = this.onStopCallListener.bind(this);\n    ConnectyCube.videochat.onUserNotAnswerListener = this.onUserNotAnswerListener.bind(this);\n    ConnectyCube.videochat.onRemoteStreamListener = this.onRemoteStreamListener.bind(this);\n    ConnectyCube.videochat.onDevicesChangeListener = this.onDevicesChangeListener.bind(this);\n\n    document.getElementById(\"call-modal-reject\").addEventListener(\"click\", () => this.rejectCall());\n    document.getElementById(\"call-modal-accept\").addEventListener(\"click\", () => this.acceptCall());\n  };\n\n  $calling = document.getElementById(\"signal-in\");\n  $dialing = document.getElementById(\"signal-out\");\n  $endCall = document.getElementById(\"signal-end\");\n\n  $modal = document.getElementById(\"call-modal-icoming\");\n\n  $muteUnmuteButton = document.getElementById(\"videochat-mute-unmute\");\n  $switchCameraButton = document.getElementById(\"videochat-switch-camera\");\n  $switchSharingScreenButton = document.getElementById(\"videochat-sharing-screen\");\n\n  mediaParams = {\n    audio: true,\n    video: true,\n    elementId: \"localStream\",\n    options: {\n      muted: true,\n      mirror: true\n    }\n  };\n\n  _session = null;\n  mediaDevicesIds = [];\n  activeDeviceId = null;\n  isAudioMuted = false;\n  isSharingScreen = false\n  startEventSharinScreen = null\n\n  addStreamElements = opponents => {\n    const $videochatStreams = document.getElementById(\"videochat-streams\");\n    const $videochatStreamsTemplate = document.getElementById(\"videochat-streams-template\");\n    const videochatStreamsTemplate = Handlebars.compile($videochatStreamsTemplate.innerHTML);\n\n    if (opponents.length === 2) {\n      $videochatStreams.classList.value = \"grid-2-1\";\n    } else if (opponents.length === 3) {\n      $videochatStreams.classList.value = \"grid-2-2\";\n    }\n\n    document.getElementById(\"call\").classList.add(\"hidden\");\n    document.getElementById(\"videochat\").classList.remove(\"hidden\");\n    $videochatStreams.innerHTML = videochatStreamsTemplate({ opponents });\n  };\n\n  onCallListener = (session, extension) => {\n    if (session.initiatorID === session.currentUserID) {\n      return false;\n    }\n\n    if (this._session) {\n      this.rejectCall(session, { busy: true });\n      return false;\n    }\n\n    this._session = session;\n    this.showIncomingCallModal();\n  };\n\n  onAcceptCallListener = (session, userId, extension) => {\n    if (userId === session.currentUserID) {\n      if (this.$modal.classList.contains(\"show\")) {\n        this._session = null;\n        this.hideIncomingCallModal();\n        this.showSnackbar(\"You have accepted the call on other side\");\n      }\n\n      return false;\n    } else {\n      const userName = this._getUserById(userId, \"name\");\n      const infoText = `${userName} has accepted the call`;\n\n      this.showSnackbar(infoText);\n      this.$dialing.pause();\n    }\n  };\n\n  onRejectCallListener = (session, userId, extension = {}) => {\n    if (userId === session.currentUserID) {\n      if (this.$modal.classList.contains(\"show\")) {\n        this._session = null;\n        this.hideIncomingCallModal();\n        this.showSnackbar(\"You have rejected the call on other side\");\n      }\n\n      return false;\n    } else {\n      const userName = this._getUserById(userId, \"name\");\n      const infoText = extension.busy ? `${userName} is busy` : `${userName} rejected the call request`;\n\n      this.stopCall(userId);\n      this.showSnackbar(infoText);\n    }\n  };\n\n  onStopCallListener = (session, userId, extension) => {\n    if (!this._session) {\n      return false;\n    }\n\n    const isStoppedByInitiator = session.initiatorID === userId;\n    const userName = this._getUserById(userId, \"name\");\n    const infoText = `${userName} has ${isStoppedByInitiator ? \"stopped\" : \"left\"} the call`;\n\n    this.showSnackbar(infoText);\n\n    if (isStoppedByInitiator) {\n      if (this.$modal.classList.contains(\"show\")) {\n        this.hideIncomingCallModal();\n      }\n      this.stopCall();\n    } else {\n      this.stopCall(userId);\n    }\n  };\n\n  onUserNotAnswerListener = (session, userId) => {\n    if (!this._session) {\n      return false;\n    }\n\n    const userName = this._getUserById(userId, \"name\");\n    const infoText = `${userName} did not answer`;\n\n    this.showSnackbar(infoText);\n    this.stopCall(userId);\n  };\n\n  onRemoteStreamListener = (session, userId, stream) => {\n    if (!this._session) {\n      return false;\n    }\n\n    const remoteStreamSelector = `remoteStream-${userId}`;\n\n    document.getElementById(`videochat-stream-loader-${userId}`).remove();\n    this._session.attachMediaStream(remoteStreamSelector, stream);\n\n    this.$muteUnmuteButton.disabled = false;\n    this.onDevicesChangeListener();\n    this._prepareVideoElement(remoteStreamSelector);\n  };\n\n  acceptCall = () => {\n    const extension = {};\n    const { opponentsIDs, initiatorID, currentUserID } = this._session;\n    const opponentsIds = [initiatorID, ...opponentsIDs].filter(userId => currentUserID !== userId);\n    const opponents = opponentsIds.map(id => ({ id, name: this._getUserById(id, \"name\") }));\n\n    this.addStreamElements(opponents);\n    this.hideIncomingCallModal();\n    this._session.getUserMedia(this.mediaParams).then(stream => {\n      this._session.accept(extension);\n      this.setActiveDeviceId(stream);\n      this._prepareVideoElement(\"localStream\");\n    });\n  };\n\n  rejectCall = (session, extension = {}) => {\n    if (session) {\n      session.reject(extension);\n    } else {\n      this._session.reject(extension);\n      this._session = null;\n      this.hideIncomingCallModal();\n    }\n  };\n\n  startCall = () => {\n    const options = {};\n    const opponents = [];\n    const opponentsIds = [];\n    const type = ConnectyCube.videochat.CallType.VIDEO; // AUDIO is also possible\n\n    document.querySelectorAll(\".select-user-checkbox\").forEach($checkbox => {\n      if ($checkbox.checked) {\n        const id = +$checkbox.dataset.id;\n        const name = this._getUserById(id, \"name\");\n\n        opponents.push({ id, name });\n        opponentsIds.push(id);\n        $checkbox.checked = false;\n      }\n    });\n\n    if (opponents.length > 0) {\n      document.getElementById(\"call\").classList.add(\"hidden\");\n      document.getElementById(\"videochat\").classList.remove(\"hidden\");\n      this.$dialing.play();\n      this.addStreamElements(opponents);\n      this._session = ConnectyCube.videochat.createNewSession(opponentsIds, type, options);\n      this._session.getUserMedia(this.mediaParams).then(stream => {\n        this._session.call({});\n        this.setActiveDeviceId(stream);\n        this._prepareVideoElement(\"localStream\");\n      });\n    } else {\n      this.showSnackbar(\"Select at less one user to start Videocall\");\n    }\n  };\n\n  stopCall = userId => {\n    const $callScreen = document.getElementById(\"call\");\n    const $videochatScreen = document.getElementById(\"videochat\");\n    const $muteButton = document.getElementById(\"videochat-mute-unmute\");\n    const $videochatStreams = document.getElementById(\"videochat-streams\");\n\n    if (userId) {\n      document.getElementById(`videochat-stream-container-${userId}`).remove();\n\n      const $streamContainers = document.querySelectorAll(\".videochat-stream-container\");\n\n      if ($streamContainers.length < 2) {\n        this.stopCall();\n      } else if ($streamContainers.length === 2) {\n        $videochatStreams.classList.value = \"\";\n      } else if ($streamContainers.length === 3) {\n        $videochatStreams.classList.value = \"grid-2-1\";\n      }\n    } else if (this._session) {\n      this._session.stop({});\n      ConnectyCube.videochat.clearSession(this._session.ID);\n      this.$dialing.pause();\n      this.$calling.pause();\n      this.$endCall.play();\n      this.$muteUnmuteButton.disabled = true;\n      this.$switchCameraButton.disabled = true;\n      this._session = null;\n      this.mediaDevicesIds = [];\n      this.activeDeviceId = null;\n      this.isAudioMuted = false;\n      $videochatStreams.innerHTML = \"\";\n      $videochatStreams.classList.value = \"\";\n      $callScreen.classList.remove(\"hidden\");\n      $videochatScreen.classList.add(\"hidden\");\n      $muteButton.classList.remove(\"muted\");\n\n      if (iOS) {\n        $videochatScreen.style.background = \"#000000\";\n      }\n    }\n  };\n\n  onDevicesChangeListener = () => {\n    if (iOS) return;\n\n    ConnectyCube.videochat.getMediaDevices(\"videoinput\").then(mediaDevices => {\n      this.mediaDevicesIds = mediaDevices?.map(({ deviceId }) => deviceId);\n\n      if (this.mediaDevicesIds.length < 2) {\n        this.$switchCameraButton.disabled = true;\n\n        if (this.mediaDevicesIds?.[0] !== this.activeDeviceId) {\n          this.switchCamera();\n        }\n      } else {\n        this.$switchCameraButton.disabled = false;\n      }\n    });\n  };\n\n  setActiveDeviceId = stream => {\n    if (stream && !iOS) {\n      const videoTracks = stream.getVideoTracks();\n      const videoTrackSettings = videoTracks[0].getSettings();\n\n      this.activeDeviceId = videoTrackSettings.deviceId;\n    }\n  };\n\n  setAudioMute = () => {\n    const $muteButton = document.getElementById(\"videochat-mute-unmute\");\n\n    if (this.isAudioMuted) {\n      this._session.unmute(\"audio\");\n      this.isAudioMuted = false;\n      $muteButton.classList.remove(\"muted\");\n    } else {\n      this._session.mute(\"audio\");\n      this.isAudioMuted = true;\n      $muteButton.classList.add(\"muted\");\n    }\n  };\n\n  switchCamera = () => {\n    const mediaDevicesId = this.mediaDevicesIds.find(deviceId => deviceId !== this.activeDeviceId);\n\n    this._session.switchMediaTracks({ video: mediaDevicesId }).then(() => {\n      this.activeDeviceId = mediaDevicesId;\n\n      if (this.isAudioMuted) {\n        this._session.mute(\"audio\");\n      }\n    });\n  };\n\n  sharingScreen = () => {\n    if (!this.isSharingScreen) {\n      return this._session.getDisplayMedia(this.mediaParams, true).then(stream => {\n        this.updateStream(stream)\n        this.isSharingScreen = true;\n        this.startEventSharinScreen = stream.getVideoTracks()[0].addEventListener('ended', () => this.stopSharingScreen())\n      }, error => {\n        console.warn('[Get display media error]', error, this.mediaParam)\n        this.stopSharingScreen()\n      });\n    } else {\n      this.stopSharingScreen()\n    }\n  }\n\n  updateStream = (stream) => {\n    this._session.call({});\n    this.setActiveDeviceId(stream);\n    this._prepareVideoElement(\"localStream\");\n  }\n\n  stopSharingScreen = () => {\n      return this._session.getUserMedia(this.mediaParams, true).then(stream => {\n      this.updateStream(stream)\n      this.isSharingScreen = false;\n      this.startEventSharinScreen = null;\n    })\n  }\n\n  /* SNACKBAR */\n\n  showSnackbar = infoText => {\n    const $snackbar = document.getElementById(\"snackbar\");\n\n    $snackbar.innerHTML = infoText;\n    $snackbar.classList.add(\"show\");\n\n    setTimeout(function() {\n      $snackbar.innerHTML = \"\";\n      $snackbar.classList.remove(\"show\");\n    }, 3000);\n  };\n\n  /*INCOMING CALL MODAL */\n\n  showIncomingCallModal = () => this._incomingCallModal(\"show\");\n\n  hideIncomingCallModal = () => this._incomingCallModal(\"hide\");\n\n  _incomingCallModal = className => {\n    const $initiator = document.getElementById(\"call-modal-initiator\");\n\n    if (className === \"hide\") {\n      $initiator.innerHTML = \"\";\n      this.$modal.classList.remove(\"show\");\n      this.$calling.pause();\n    } else {\n      $initiator.innerHTML = this._getUserById(this._session.initiatorID, \"name\");\n      this.$modal.classList.add(\"show\");\n      this.$calling.play();\n    }\n  };\n\n  _getUserById = (userId, key) => {\n    const user = users.find(user => user.id == userId);\n\n    return typeof key === \"string\" ? user[key] : user;\n  };\n\n  _prepareVideoElement = videoElement => {\n    const $video = document.getElementById(videoElement);\n\n    $video.style.visibility = \"visible\";\n\n    if (iOS) {\n      document.getElementById(\"videochat\").style.background = \"transparent\";\n      $video.style.backgroundColor = \"\";\n      $video.style.zIndex = -1;\n    }\n  };\n}\n\nexport default new CallService();\n"],"sourceRoot":""}